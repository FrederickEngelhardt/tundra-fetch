{"version":3,"sources":["../tundra-replay.js"],"names":["replayProfile","profileRequests","reset","forEach","request","response","mock","url","opts","urlMatches","RegExp","test","bodyMatches","body","content","headersMatch","JSON","stringify","headers","methodMatches","method","status","statusCode","name","overwriteRoutes"],"mappings":";;;;;QAIgBA,a,GAAAA,a;;AAJhB;;AACA;;;;AACA;;;;;;AAEO,SAASA,aAAT,CAAuBC,eAAvB,EAAwC;;AAE3C,wBAAUC,KAAV;;AAEAD,oBAAgBE,OAAhB,CAAwB,gBAAyB;AAAA,YAAvBC,OAAuB,QAAvBA,OAAuB;AAAA,YAAdC,QAAc,QAAdA,QAAc;;AAC7C,4BAAUC,IAAV,CAAe,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC1B,gBAAIC,aAAa,IAAIC,MAAJ,4BAAoC,sBAAaN,QAAQG,GAArB,CAApC,QAAkE,GAAlE,EAAuEI,IAAvE,CAA4EJ,GAA5E,CAAjB;AACA,gBAAIK,cAAcJ,OAAOA,KAAKK,IAAL,KAAcT,QAAQU,OAA7B,GAAuC,IAAzD;AACA,gBAAIC,eAAeP,OAAOQ,KAAKC,SAAL,CAAeT,KAAKU,OAApB,MAAiCF,KAAKC,SAAL,CAAeb,QAAQc,OAAvB,CAAxC,GAA0E,IAA7F;AACA,gBAAIC,gBAAgBX,OAAOA,KAAKY,MAAL,KAAgBhB,QAAQgB,MAA/B,GAAuC,IAA3D;;AAEA,mBAAOX,cAAcU,aAAd,IAA+BP,WAA/B,IAA8CG,YAArD;AACH,SAPD,EAOG;AACCF,kBAAMR,SAASS,OADhB;AAECI,qBAASb,SAASa,OAFnB;AAGCG,oBAAQhB,SAASiB;AAHlB,SAPH,EAWE;AACEC,kBAASnB,QAAQgB,MAAjB,SAA2BhB,QAAQG,GADrC;AAEEiB,6BAAiB;AAFnB,SAXF;AAeH,KAhBD;AAiBH","file":"tundra-replay.js","sourcesContent":["import 'url';\nimport fetchMock from 'fetch-mock';\nimport escapeRegExp from 'lodash.escaperegexp';\n\nexport function replayProfile(profileRequests) {\n\n    fetchMock.reset();\n\n    profileRequests.forEach(({request, response}) => {\n        fetchMock.mock((url, opts) => {\n            let urlMatches = new RegExp(`^(https?://)?(www\\\\.)?${escapeRegExp(request.url)}$`, 'g').test(url);\n            let bodyMatches = opts ? opts.body === request.content : true;\n            let headersMatch = opts ? JSON.stringify(opts.headers) === JSON.stringify(request.headers) : true;\n            let methodMatches = opts ? opts.method === request.method: true;\n\n            return urlMatches && methodMatches && bodyMatches && headersMatch;\n        }, {\n            body: response.content,\n            headers: response.headers,\n            status: response.statusCode\n        },{\n            name: `${request.method} ${request.url}`,\n            overwriteRoutes: false\n        })\n    });\n}"]}