{"version":3,"sources":["../../src/fetchArgumentExtractor.test.js"],"names":["describe","it","expect","toEqual","url","config","method","undefined","toThrow"],"mappings":";;AAAA;;;;;;AAEAA,SAAS,mBAAT,EAA8B,YAAM;AAClCC,KAAG,wCAAH,EAA6C,YAAM;AACjDC,WAAO,sCAAsB,CAAC,SAAD,CAAtB,CAAP,EAA2CC,OAA3C,CAAmD;AACjDC,WAAK,SAD4C;AAEjDC,cAAQ;AACNC,gBAAQ;AADF;AAFyC,KAAnD;AAMD,GAPD;;AASAL,KAAG,0EAAH,EAA+E,YAAM;AACnFC,WAAO,sCAAsB,CAAC,SAAD,EAAYK,SAAZ,CAAtB,CAAP,EAAsDJ,OAAtD,CAA8D;AAC5DC,WAAK,SADuD;AAE5DC,cAAQ;AACNC,gBAAQ;AADF;AAFoD,KAA9D;AAMD,GAPD;;AASAL,KAAG,2DAAH,EAAgE,YAAM;AACpEC,WAAO,sCAAsB,CAAC,EAAEE,KAAK,SAAP,EAAkBE,QAAQ,MAA1B,EAAD,CAAtB,CAAP,EAAoEH,OAApE,CAA4E;AAC1EC,WAAK,SADqE;AAE1EC,cAAQ;AACND,aAAK,SADC;AAENE,gBAAQ;AAFF;AAFkE,KAA5E;AAOD,GARD;;AAUAL,KAAG,gEAAH,EAAqE,YAAM;AACzEC,WAAO,sCAAsB,CAAC,SAAD,EAAY,EAAEI,QAAQ,KAAV,EAAZ,CAAtB,CAAP,EAA8DH,OAA9D,CAAsE;AACpEC,WAAK,SAD+D;AAEpEC,cAAQ;AACNC,gBAAQ;AADF;AAF4D,KAAtE;AAMD,GAPD;;AASAL,KAAG,2CAAH,EAAgD,YAAM;AACpDC,WAAO;AAAA,aAAM,uCAAN;AAAA,KAAP,EAAsCM,OAAtC,CAA8C,wCAA9C;AACD,GAFD;AAGD,CAzCD","file":"fetchArgumentExtractor.test.js","sourcesContent":["import extractFetchArguments from './fetchArgumentExtractor';\n\ndescribe('fetchArgumentUtil', () => {\n  it('should extract default fetch arguments', () => {\n    expect(extractFetchArguments(['someurl'])).toEqual({\n      url: 'someurl',\n      config: {\n        method: 'GET',\n      },\n    });\n  });\n\n  it('should extract default fetch arguments with explicitly undefined options', () => {\n    expect(extractFetchArguments(['someurl', undefined])).toEqual({\n      url: 'someurl',\n      config: {\n        method: 'GET',\n      },\n    });\n  });\n\n  it('should extract fetch arguments with just a request config', () => {\n    expect(extractFetchArguments([{ url: 'someurl', method: 'POST' }])).toEqual({\n      url: 'someurl',\n      config: {\n        url: 'someurl',\n        method: 'POST',\n      },\n    });\n  });\n\n  it('should extract fetch arguments with a URL and a request config', () => {\n    expect(extractFetchArguments(['someurl', { method: 'PUT' }])).toEqual({\n      url: 'someurl',\n      config: {\n        method: 'PUT',\n      },\n    });\n  });\n\n  it('should interpret the arguments as unknown', () => {\n    expect(() => extractFetchArguments()).toThrow('Unknown fetch argument configuration: ');\n  });\n});\n"]}