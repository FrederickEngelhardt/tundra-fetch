{"version":3,"sources":["../../src/replay.js"],"names":["profileRequests","config","reset","repeatMap","forEach","request","response","requestRepeatMap","invocations","matchingFunction","url","opts","actualOpts","actualUrl","actualOptsHeaders","JSON","stringify","headers","headersToOmit","actualRequestHeaders","urlMatches","bodyMatches","content","body","headersMatch","methodMatches","method","responseOptions","status","statusCode","mock"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe,UAACA,eAAD,EAAkBC,MAAlB,EAA6B;AAC1C,sBAAUC,KAAV;;AAEA,MAAMC,YAAY,uCAAsBH,eAAtB,CAAlB;;AAEAA,kBAAgBI,OAAhB,CAAwB,gBAA2B;AAAA,QAAxBC,OAAwB,QAAxBA,OAAwB;AAAA,QAAfC,QAAe,QAAfA,QAAe;;AACjD,QAAMC,mBAAmBJ,UAAU,gCAAeE,OAAf,CAAV,CAAzB;AACAE,qBAAiBC,WAAjB,IAAgC,CAAhC;;AAEA,QAAMC,mBAAmB,SAAnBA,gBAAmB,CAACC,GAAD,EAAMC,IAAN,EAAe;AACtC,UAAMC,aAAaD,QAAQD,GAA3B;AACA,UAAMG,YAAYF,OAAOD,GAAP,GAAaA,IAAIA,GAAnC;AACA,UAAMI,oBAAoBC,KAAKC,SAAL,CAAe,sBAAKJ,WAAWK,OAAhB,EAAyBhB,OAAOiB,aAAhC,CAAf,CAA1B;AACA,UAAMC,uBAAuBJ,KAAKC,SAAL,CAAe,sBAAKX,QAAQY,OAAb,EAAsBhB,OAAOiB,aAA7B,CAAf,CAA7B;;AAEA,UAAME,aAAa,gCAAkB,+BAAgBf,QAAQK,GAAxB,CAAlB,EAAgD,+BAAgBG,SAAhB,CAAhD,CAAnB;AACA,UAAMQ,cAAcT,aAAa,gCAAkBP,QAAQiB,OAA1B,EAAmCV,WAAWW,IAA9C,CAAb,GAAmE,IAAvF;AACA,UAAMC,eAAeZ,aAAa,gCAAkBO,oBAAlB,EAAwCL,iBAAxC,CAAb,GAA0E,IAA/F;AACA,UAAMW,gBAAgBb,aAAaA,WAAWc,MAAX,KAAsBrB,QAAQqB,MAA3C,GAAoD,IAA1E;;AAEA,aAAON,cAAcK,aAAd,IAA+BJ,WAA/B,IAA8CG,YAArD;AACD,KAZD;;AAcA,QAAMG,kBAAkB;AACtBJ,YAAMjB,SAASgB,OADO;AAEtBL,eAASX,SAASW,OAFI;AAGtBW,cAAQtB,SAASuB;AAHK,KAAxB;;AAMA,wBAAUC,IAAV,CACErB,gBADF,EAEEkB,eAFF,EAGE,sCAAqBtB,OAArB,EAA8BJ,MAA9B,EAAsCE,SAAtC,CAHF;AAKD,GA7BD;AA8BD,C","file":"replay.js","sourcesContent":["import 'url';\nimport fetchMock from 'fetch-mock';\nimport omit from 'lodash.omit';\nimport buildRequestId from './requestIdBuilder';\nimport stringIsSimilarTo from './stringSimilarity';\nimport buildFetchMockConfig from './fetchMockConfigBuilder';\nimport buildRequestRepeatMap from './requestRepeatMapBuilder';\nimport removeURLPrefix from './removeURLPrefix';\n\nexport default (profileRequests, config) => {\n  fetchMock.reset();\n\n  const repeatMap = buildRequestRepeatMap(profileRequests);\n\n  profileRequests.forEach(({ request, response }) => {\n    const requestRepeatMap = repeatMap[buildRequestId(request)];\n    requestRepeatMap.invocations += 1;\n\n    const matchingFunction = (url, opts) => {\n      const actualOpts = opts || url;\n      const actualUrl = opts ? url : url.url;\n      const actualOptsHeaders = JSON.stringify(omit(actualOpts.headers, config.headersToOmit));\n      const actualRequestHeaders = JSON.stringify(omit(request.headers, config.headersToOmit));\n\n      const urlMatches = stringIsSimilarTo(removeURLPrefix(request.url), removeURLPrefix(actualUrl));\n      const bodyMatches = actualOpts ? stringIsSimilarTo(request.content, actualOpts.body) : true;\n      const headersMatch = actualOpts ? stringIsSimilarTo(actualRequestHeaders, actualOptsHeaders) : true;\n      const methodMatches = actualOpts ? actualOpts.method === request.method : true;\n\n      return urlMatches && methodMatches && bodyMatches && headersMatch;\n    };\n\n    const responseOptions = {\n      body: response.content,\n      headers: response.headers,\n      status: response.statusCode,\n    };\n\n    fetchMock.mock(\n      matchingFunction,\n      responseOptions,\n      buildFetchMockConfig(request, config, repeatMap),\n    );\n  });\n};\n"]}