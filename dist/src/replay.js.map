{"version":3,"sources":["../../src/replay.js"],"names":["DEFAULT_CONFIG","debuggingEnabled","debugPort","buildResponseOptions","body","response","content","headers","status","statusCode","matchingFunction","matchingConfig","request","_url","_config","url","config","urlMatcher","headersMatcher","methodMatcher","bodyMatcher","headersToOmit","configHeaders","JSON","stringify","requestHeaders","urlMatches","defaultUrlMatcher","bodyMatches","defaultBodyMatcher","headersMatch","defaultHeadersMatcher","methodMatches","defaultMethodMatcher","method","everythingMatches","responseOptions","builtRequest","profileRequests","reset","defaultedConfig","repeatMap","forEach","requestRepeatMap","invocations","mock","catch","args","fetchConfig","console","error"],"mappings":";;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,iBAAiB;AACrBC,oBAAkB,IADG;AAErBC,aAAW;AAFU,CAAvB;;AAKA,IAAMC,uBAAuB,SAAvBA,oBAAuB;AAAA,SAAa;AACxCC,UAAMC,SAASC,OADyB;AAExCC,aAASF,SAASE,OAFsB;AAGxCC,YAAQH,SAASI;AAHuB,GAAb;AAAA,CAA7B;;AAMO,IAAMC,8CAAmB,SAAnBA,gBAAmB,CAACC,cAAD,EAAiBC,OAAjB,EAA0BP,QAA1B;AAAA,SAAuC,UAACQ,IAAD,EAAOC,OAAP,EAAmB;AAAA,gCAChE,sCAAsB,CAACD,IAAD,EAAOC,OAAP,CAAtB,CADgE;AAAA,QAChFC,GADgF,yBAChFA,GADgF;AAAA,QAC3EC,MAD2E,yBAC3EA,MAD2E;;AAAA,eAIpFL,kBAAkB,EAJkE;AAAA,QAGtFM,UAHsF,QAGtFA,UAHsF;AAAA,QAG1EC,cAH0E,QAG1EA,cAH0E;AAAA,QAG1DC,aAH0D,QAG1DA,aAH0D;AAAA,QAG3CC,WAH2C,QAG3CA,WAH2C;AAAA,QAG9BC,aAH8B,QAG9BA,aAH8B;;AAMxF,QAAMC,gBAAgBC,KAAKC,SAAL,CAAe,sBAAKR,OAAOT,OAAZ,EAAqBc,aAArB,CAAf,CAAtB;AACA,QAAMI,iBAAiBF,KAAKC,SAAL,CAAe,sBAAKZ,QAAQL,OAAb,EAAsBc,aAAtB,CAAf,CAAvB;;AAEA,QAAIK,aAAa,IAAjB;AACA,QAAMC,oBAAoB,SAApBA,iBAAoB;AAAA,aAAM,gCAAkB,+BAAgBf,QAAQG,GAAxB,CAAlB,EAAgD,+BAAgBA,GAAhB,CAAhD,CAAN;AAAA,KAA1B;;AAEA,QAAIE,UAAJ,EAAgB;AACdS,mBAAaT,WAAW,+BAAgBL,QAAQG,GAAxB,CAAX,EAAyC,+BAAgBA,GAAhB,CAAzC,EAA+DY,iBAA/D,CAAb;AACD,KAFD,MAEO;AACLD,mBAAa,gCAAkB,+BAAgBd,QAAQG,GAAxB,CAAlB,EAAgD,+BAAgBA,GAAhB,CAAhD,CAAb;AACD;;AAED,QAAIa,cAAc,IAAlB;AACA,QAAMC,qBAAqB,SAArBA,kBAAqB;AAAA,aAAM,gCAAkBjB,QAAQN,OAA1B,EAAmCU,OAAOZ,IAA1C,CAAN;AAAA,KAA3B;;AAEA,QAAIgB,eAAeJ,MAAnB,EAA2B;AACzBY,oBAAcR,YAAYR,QAAQN,OAApB,EAA6BU,OAAOZ,IAApC,EAA0CyB,kBAA1C,CAAd;AACD,KAFD,MAEO,IAAIb,MAAJ,EAAY;AACjBY,oBAAcC,oBAAd;AACD;;AAED,QAAIC,eAAe,IAAnB;AACA,QAAMC,wBAAwB,SAAxBA,qBAAwB;AAAA,aAAM,gCAAkBN,cAAlB,EAAkCH,aAAlC,CAAN;AAAA,KAA9B;;AAEA,QAAIJ,kBAAkBF,MAAtB,EAA8B;AAC5Bc,qBAAeZ,eAAeO,cAAf,EAA+BH,aAA/B,EAA8CS,qBAA9C,CAAf;AACD,KAFD,MAEO,IAAIf,MAAJ,EAAY;AACjBc,qBAAeC,uBAAf;AACD;;AAED,QAAIC,gBAAgB,IAApB;AACA,QAAMC,uBAAuB,SAAvBA,oBAAuB;AAAA,aAAMjB,OAAOkB,MAAP,KAAkBtB,QAAQsB,MAAhC;AAAA,KAA7B;;AAEA,QAAIf,iBAAiBH,MAArB,EAA6B;AAC3BgB,sBAAgBb,cAAcH,OAAOkB,MAArB,EAA6BtB,QAAQsB,MAArC,EAA6CD,oBAA7C,CAAhB;AACD,KAFD,MAEO,IAAIjB,MAAJ,EAAY;AACjBgB,sBAAgBC,sBAAhB;AACD;;AAED,QAAME,oBAAoBT,cAAcM,aAAd,IAA+BJ,WAA/B,IAA8CE,YAAxE;;AAEA,QAAIK,qBAAqBxB,cAArB,IAAuCA,eAAeV,gBAA1D,EAA4E;AAC1E,UAAMmC,kBAAkBjC,qBAAqBE,QAArB,CAAxB;AACA,UAAMgC,eAAe,8BAAatB,GAAb,EAAkBC,MAAlB,EAA0BoB,eAA1B,EAA2CA,gBAAgBhC,IAA3D,CAArB;;AAEA,mCAAkBiC,YAAlB,EAAgC1B,eAAeT,SAA/C,EAA0DiC,iBAA1D;AACD;;AAED,WAAOA,iBAAP;AACD,GAvD+B;AAAA,CAAzB;;kBAyDQ,UAACG,eAAD,EAAkBtB,MAAlB,EAA6B;AAC1C,sBAAUuB,KAAV;;AAEA,MAAMC,+BAAuBxC,cAAvB,EAA0CgB,MAA1C,CAAN;AACA,MAAMyB,YAAY,uCAAsBH,eAAtB,CAAlB;;AAEAA,kBAAgBI,OAAhB,CAAwB,iBAA2B;AAAA,QAAxB9B,OAAwB,SAAxBA,OAAwB;AAAA,QAAfP,QAAe,SAAfA,QAAe;;AACjD,QAAMsC,mBAAmBF,UAAU,gCAAe7B,OAAf,CAAV,CAAzB;AACA+B,qBAAiBC,WAAjB,IAAgC,CAAhC;;AAEA,QAAMR,kBAAkBjC,qBAAqBE,QAArB,CAAxB;;AAEA,wBACGwC,IADH,CAEInC,iBAAiB8B,eAAjB,EAAkC5B,OAAlC,EAA2CP,QAA3C,CAFJ,EAGIF,qBAAqBE,QAArB,CAHJ,EAII,sCAAqBO,OAArB,EAA8B4B,eAA9B,EAA+CC,SAA/C,CAJJ,EAMGK,KANH,yDAMS;AAAA,wCAAUC,IAAV;AAAUA,YAAV;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBACDP,gBAAgBvC,gBADf;AAAA;AAAA;AAAA;;AAAA,uCAEkC,sCAAsB8C,IAAtB,CAFlC,EAEKhC,GAFL,0BAEKA,GAFL,EAEkBiC,WAFlB,0BAEUhC,MAFV;AAGGqB,0BAHH,GAGkB,8BAAatB,GAAb,EAAkBiC,WAAlB,EAA+BZ,eAA/B,EAAgDA,gBAAgBhC,IAAhE,CAHlB;AAAA;AAAA,qBAKG,6BAAkBiC,YAAlB,EAAgCG,gBAAgBtC,SAAhD,EAA2D,KAA3D,CALH;;AAAA;;AAQL+C,sBAAQC,KAAR,CAAc,yBAAd;;AARK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KANT;AAgBD,GAtBD;AAuBD,C","file":"replay.js","sourcesContent":["import 'url';\nimport fetchMock from 'fetch-mock';\nimport omit from 'lodash.omit';\nimport buildRequestId from './requestIdBuilder';\nimport stringIsSimilarTo from './stringSimilarity';\nimport buildFetchMockConfig from './fetchMockConfigBuilder';\nimport buildRequestRepeatMap from './requestRepeatMapBuilder';\nimport removeURLPrefix from './removeURLPrefix';\nimport extractFetchArguments from './fetchArgumentExtractor';\nimport buildRequest from './requestBuilder';\nimport submitRequestData from './submitRequest';\n\nconst DEFAULT_CONFIG = {\n  debuggingEnabled: true,\n  debugPort: 9091,\n};\n\nconst buildResponseOptions = response => ({\n  body: response.content,\n  headers: response.headers,\n  status: response.statusCode,\n});\n\nexport const matchingFunction = (matchingConfig, request, response) => (_url, _config) => {\n  const { url, config } = extractFetchArguments([_url, _config]);\n  const {\n    urlMatcher, headersMatcher, methodMatcher, bodyMatcher, headersToOmit,\n  } = matchingConfig || {};\n\n  const configHeaders = JSON.stringify(omit(config.headers, headersToOmit));\n  const requestHeaders = JSON.stringify(omit(request.headers, headersToOmit));\n\n  let urlMatches = true;\n  const defaultUrlMatcher = () => stringIsSimilarTo(removeURLPrefix(request.url), removeURLPrefix(url));\n\n  if (urlMatcher) {\n    urlMatches = urlMatcher(removeURLPrefix(request.url), removeURLPrefix(url), defaultUrlMatcher);\n  } else {\n    urlMatches = stringIsSimilarTo(removeURLPrefix(request.url), removeURLPrefix(url));\n  }\n\n  let bodyMatches = true;\n  const defaultBodyMatcher = () => stringIsSimilarTo(request.content, config.body);\n\n  if (bodyMatcher && config) {\n    bodyMatches = bodyMatcher(request.content, config.body, defaultBodyMatcher);\n  } else if (config) {\n    bodyMatches = defaultBodyMatcher();\n  }\n\n  let headersMatch = true;\n  const defaultHeadersMatcher = () => stringIsSimilarTo(requestHeaders, configHeaders);\n\n  if (headersMatcher && config) {\n    headersMatch = headersMatcher(requestHeaders, configHeaders, defaultHeadersMatcher);\n  } else if (config) {\n    headersMatch = defaultHeadersMatcher();\n  }\n\n  let methodMatches = true;\n  const defaultMethodMatcher = () => config.method === request.method;\n\n  if (methodMatcher && config) {\n    methodMatches = methodMatcher(config.method, request.method, defaultMethodMatcher);\n  } else if (config) {\n    methodMatches = defaultMethodMatcher();\n  }\n\n  const everythingMatches = urlMatches && methodMatches && bodyMatches && headersMatch;\n\n  if (everythingMatches && matchingConfig && matchingConfig.debuggingEnabled) {\n    const responseOptions = buildResponseOptions(response);\n    const builtRequest = buildRequest(url, config, responseOptions, responseOptions.body);\n\n    submitRequestData(builtRequest, matchingConfig.debugPort, everythingMatches);\n  }\n\n  return everythingMatches;\n};\n\nexport default (profileRequests, config) => {\n  fetchMock.reset();\n\n  const defaultedConfig = { ...DEFAULT_CONFIG, ...config };\n  const repeatMap = buildRequestRepeatMap(profileRequests);\n\n  profileRequests.forEach(({ request, response }) => {\n    const requestRepeatMap = repeatMap[buildRequestId(request)];\n    requestRepeatMap.invocations += 1;\n\n    const responseOptions = buildResponseOptions(response);\n\n    fetchMock\n      .mock(\n        matchingFunction(defaultedConfig, request, response),\n        buildResponseOptions(response),\n        buildFetchMockConfig(request, defaultedConfig, repeatMap),\n      )\n      .catch(async (...args) => {\n        if (defaultedConfig.debuggingEnabled) {\n          const { url, config: fetchConfig } = extractFetchArguments(args);\n          const builtRequest = buildRequest(url, fetchConfig, responseOptions, responseOptions.body);\n\n          await submitRequestData(builtRequest, defaultedConfig.debugPort, false);\n        }\n\n        console.error('Unable to match request');\n      });\n  });\n};\n"]}