{"version":3,"sources":["../../src/replay.js"],"names":["DEFAULT_DEBUG_PORT","buildResponseOptions","body","response","content","headers","status","statusCode","matchingFunction","matchingConfig","request","_url","_config","url","config","headersToOmit","configHeaders","JSON","stringify","requestHeaders","urlMatches","bodyMatches","headersMatch","methodMatches","method","everythingMatches","debuggingEnabled","responseOptions","builtRequest","debugPort","profileRequests","reset","repeatMap","forEach","requestRepeatMap","invocations","mock","catch","args","fetchConfig","console","error"],"mappings":"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","file":"replay.js","sourcesContent":["import 'url';\nimport fetchMock from 'fetch-mock';\nimport omit from 'lodash.omit';\nimport buildRequestId from './requestIdBuilder';\nimport stringIsSimilarTo from './stringSimilarity';\nimport buildFetchMockConfig from './fetchMockConfigBuilder';\nimport buildRequestRepeatMap from './requestRepeatMapBuilder';\nimport removeURLPrefix from './removeURLPrefix';\nimport extractFetchArguments from './fetchArgumentExtractor';\nimport buildRequest from './requestBuilder';\nimport submitRequestData from './submitRequest';\n\nconst DEFAULT_DEBUG_PORT = 9091;\n\nconst buildResponseOptions = response => ({\n  body: response.content,\n  headers: response.headers,\n  status: response.statusCode,\n});\n\nexport const matchingFunction = (matchingConfig, request, response) => (_url, _config) => {\n  const { url, config } = extractFetchArguments([_url, _config]);\n  const headersToOmit = matchingConfig ? matchingConfig.headersToOmit : null;\n  const configHeaders = JSON.stringify(omit(config.headers, headersToOmit));\n  const requestHeaders = JSON.stringify(omit(request.headers, headersToOmit));\n\n  const urlMatches = stringIsSimilarTo(removeURLPrefix(request.url), removeURLPrefix(url));\n  const bodyMatches = config ? stringIsSimilarTo(request.content, config.body) : true;\n  const headersMatch = config ? stringIsSimilarTo(requestHeaders, configHeaders) : true;\n  const methodMatches = config ? config.method === request.method : true;\n\n  const everythingMatches = urlMatches && methodMatches && bodyMatches && headersMatch;\n\n  if (everythingMatches && matchingConfig && matchingConfig.debuggingEnabled) {\n    const responseOptions = buildResponseOptions(response);\n    const builtRequest = buildRequest(url, config, responseOptions, responseOptions.body);\n\n    submitRequestData(builtRequest, matchingConfig.debugPort, everythingMatches);\n  }\n\n  return everythingMatches;\n};\n\nexport default (profileRequests, config) => {\n  fetchMock.reset();\n\n  const repeatMap = buildRequestRepeatMap(profileRequests);\n\n  profileRequests.forEach(({ request, response }) => {\n    const requestRepeatMap = repeatMap[buildRequestId(request)];\n    requestRepeatMap.invocations += 1;\n\n    const responseOptions = buildResponseOptions(response);\n\n    fetchMock.mock(\n      matchingFunction(config, request, response),\n      buildResponseOptions(response),\n      buildFetchMockConfig(request, config, repeatMap),\n    ).catch(async (...args) => {\n      if (config.debuggingEnabled) {\n        const { url, config: fetchConfig } = extractFetchArguments(args);\n        const builtRequest = buildRequest(url, fetchConfig, responseOptions, responseOptions.body);\n\n        await submitRequestData(builtRequest, config.debugPort ? config.debugPort : DEFAULT_DEBUG_PORT, false);\n      }\n\n      console.error('Unable to match request');\n    });\n  });\n};\n"]}