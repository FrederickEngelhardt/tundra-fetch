{"version":3,"sources":["../../src/replay.js"],"names":["matchingFunction","matchingConfig","request","_url","_config","url","config","headersToOmit","configHeaders","JSON","stringify","headers","requestHeaders","urlMatches","bodyMatches","content","body","headersMatch","methodMatches","method","profileRequests","reset","repeatMap","forEach","response","requestRepeatMap","invocations","responseOptions","status","statusCode","mock"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEO,IAAMA,8CAAmB,SAAnBA,gBAAmB,CAACC,cAAD,EAAiBC,OAAjB;AAAA,SAA6B,UAACC,IAAD,EAAOC,OAAP,EAAmB;AAAA,gCACtD,sCAAsB,CAACD,IAAD,EAAOC,OAAP,CAAtB,CADsD;AAAA,QACtEC,GADsE,yBACtEA,GADsE;AAAA,QACjEC,MADiE,yBACjEA,MADiE;;AAE9E,QAAMC,gBAAgBN,iBAAiBA,eAAeM,aAAhC,GAAgD,IAAtE;AACA,QAAMC,gBAAgBC,KAAKC,SAAL,CAAe,sBAAKJ,OAAOK,OAAZ,EAAqBJ,aAArB,CAAf,CAAtB;AACA,QAAMK,iBAAiBH,KAAKC,SAAL,CAAe,sBAAKR,QAAQS,OAAb,EAAsBJ,aAAtB,CAAf,CAAvB;;AAEA,QAAMM,aAAa,gCAAkB,+BAAgBX,QAAQG,GAAxB,CAAlB,EAAgD,+BAAgBA,GAAhB,CAAhD,CAAnB;AACA,QAAMS,cAAcR,SAAS,gCAAkBJ,QAAQa,OAA1B,EAAmCT,OAAOU,IAA1C,CAAT,GAA2D,IAA/E;AACA,QAAMC,eAAeX,SAAS,gCAAkBM,cAAlB,EAAkCJ,aAAlC,CAAT,GAA4D,IAAjF;AACA,QAAMU,gBAAgBZ,SAASA,OAAOa,MAAP,KAAkBjB,QAAQiB,MAAnC,GAA4C,IAAlE;;AAEA,WAAON,cAAcK,aAAd,IAA+BJ,WAA/B,IAA8CG,YAArD;AACD,GAZ+B;AAAA,CAAzB;;kBAcQ,UAACG,eAAD,EAAkBd,MAAlB,EAA6B;AAC1C,sBAAUe,KAAV;;AAEA,MAAMC,YAAY,uCAAsBF,eAAtB,CAAlB;;AAEAA,kBAAgBG,OAAhB,CAAwB,gBAA2B;AAAA,QAAxBrB,OAAwB,QAAxBA,OAAwB;AAAA,QAAfsB,QAAe,QAAfA,QAAe;;AACjD,QAAMC,mBAAmBH,UAAU,gCAAepB,OAAf,CAAV,CAAzB;AACAuB,qBAAiBC,WAAjB,IAAgC,CAAhC;;AAEA,QAAMC,kBAAkB;AACtBX,YAAMQ,SAAST,OADO;AAEtBJ,eAASa,SAASb,OAFI;AAGtBiB,cAAQJ,SAASK;AAHK,KAAxB;;AAMA,wBAAUC,IAAV,CACE9B,iBAAiBM,MAAjB,EAAyBJ,OAAzB,CADF,EAEEyB,eAFF,EAGE,sCAAqBzB,OAArB,EAA8BI,MAA9B,EAAsCgB,SAAtC,CAHF;AAKD,GAfD;AAgBD,C","file":"replay.js","sourcesContent":["import 'url';\nimport fetchMock from 'fetch-mock';\nimport omit from 'lodash.omit';\nimport buildRequestId from './requestIdBuilder';\nimport stringIsSimilarTo from './stringSimilarity';\nimport buildFetchMockConfig from './fetchMockConfigBuilder';\nimport buildRequestRepeatMap from './requestRepeatMapBuilder';\nimport removeURLPrefix from './removeURLPrefix';\nimport extractFetchArguments from './fetchArgumentExtractor';\n\nexport const matchingFunction = (matchingConfig, request) => (_url, _config) => {\n  const { url, config } = extractFetchArguments([_url, _config]);\n  const headersToOmit = matchingConfig ? matchingConfig.headersToOmit : null;\n  const configHeaders = JSON.stringify(omit(config.headers, headersToOmit));\n  const requestHeaders = JSON.stringify(omit(request.headers, headersToOmit));\n\n  const urlMatches = stringIsSimilarTo(removeURLPrefix(request.url), removeURLPrefix(url));\n  const bodyMatches = config ? stringIsSimilarTo(request.content, config.body) : true;\n  const headersMatch = config ? stringIsSimilarTo(requestHeaders, configHeaders) : true;\n  const methodMatches = config ? config.method === request.method : true;\n\n  return urlMatches && methodMatches && bodyMatches && headersMatch;\n};\n\nexport default (profileRequests, config) => {\n  fetchMock.reset();\n\n  const repeatMap = buildRequestRepeatMap(profileRequests);\n\n  profileRequests.forEach(({ request, response }) => {\n    const requestRepeatMap = repeatMap[buildRequestId(request)];\n    requestRepeatMap.invocations += 1;\n\n    const responseOptions = {\n      body: response.content,\n      headers: response.headers,\n      status: response.statusCode,\n    };\n\n    fetchMock.mock(\n      matchingFunction(config, request),\n      responseOptions,\n      buildFetchMockConfig(request, config, repeatMap),\n    );\n  });\n};\n"]}