{"version":3,"sources":["../../src/replay.js"],"names":["DEFAULT_CONFIG","debuggingEnabled","debugPort","buildResponseOptions","body","response","content","headers","status","statusCode","matchingFunction","matchingConfig","request","_url","_config","url","config","urlMatcher","headersMatcher","methodMatcher","bodyMatcher","headersToOmit","configHeaders","JSON","stringify","requestHeaders","urlMatches","bodyMatches","headersMatch","methodMatches","method","everythingMatches","responseOptions","builtRequest","profileRequests","reset","defaultedConfig","repeatMap","forEach","requestRepeatMap","invocations","mock","catch","args","fetchConfig","console","error"],"mappings":"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","file":"replay.js","sourcesContent":["import 'url';\nimport fetchMock from 'fetch-mock';\nimport omit from 'lodash.omit';\nimport buildRequestId from './requestIdBuilder';\nimport stringIsSimilarTo from './stringSimilarity';\nimport buildFetchMockConfig from './fetchMockConfigBuilder';\nimport buildRequestRepeatMap from './requestRepeatMapBuilder';\nimport removeURLPrefix from './removeURLPrefix';\nimport extractFetchArguments from './fetchArgumentExtractor';\nimport buildRequest from './requestBuilder';\nimport submitRequestData from './submitRequest';\n\n\nconst DEFAULT_CONFIG = {\n  debuggingEnabled: true,\n  debugPort: 9091,\n};\n\nconst buildResponseOptions = response => ({\n  body: response.content,\n  headers: response.headers,\n  status: response.statusCode,\n});\n\nexport const matchingFunction = (matchingConfig, request, response) => (_url, _config) => {\n  const { url, config } = extractFetchArguments([_url, _config]);\n  const {\n    urlMatcher, headersMatcher, methodMatcher, bodyMatcher, headersToOmit,\n  } = matchingConfig || {};\n\n  const configHeaders = JSON.stringify(omit(config.headers, headersToOmit));\n  const requestHeaders = JSON.stringify(omit(request.headers, headersToOmit));\n\n  let urlMatches = true;\n  if (urlMatcher) {\n    urlMatches = urlMatcher(request.url, url);\n  } else {\n    urlMatches = stringIsSimilarTo(removeURLPrefix(request.url), removeURLPrefix(url));\n  }\n\n  let bodyMatches = true;\n  if (bodyMatcher && config) {\n    bodyMatches = bodyMatcher(request.content, config.body);\n  } else if (config) {\n    bodyMatches = stringIsSimilarTo(request.content, config.body);\n  }\n\n  let headersMatch = true;\n\n  if (headersMatcher && config) {\n    headersMatch = headersMatcher(requestHeaders, configHeaders);\n  } else if (config) {\n    headersMatch = stringIsSimilarTo(requestHeaders, configHeaders);\n  }\n\n  let methodMatches = true;\n  if (methodMatcher && config) {\n    methodMatches = methodMatcher(config.method, request.method);\n  } else if (config) {\n    methodMatches = config.method === request.method;\n  }\n\n\n  const everythingMatches = urlMatches && methodMatches && bodyMatches && headersMatch;\n\n  if (everythingMatches && matchingConfig && matchingConfig.debuggingEnabled) {\n    const responseOptions = buildResponseOptions(response);\n    const builtRequest = buildRequest(url, config, responseOptions, responseOptions.body);\n\n    submitRequestData(builtRequest, matchingConfig.debugPort, everythingMatches);\n  }\n\n  return everythingMatches;\n};\n\nexport default (profileRequests, config) => {\n  fetchMock.reset();\n\n  const defaultedConfig = { ...DEFAULT_CONFIG, ...config };\n  const repeatMap = buildRequestRepeatMap(profileRequests);\n\n  profileRequests.forEach(({ request, response }) => {\n    const requestRepeatMap = repeatMap[buildRequestId(request)];\n    requestRepeatMap.invocations += 1;\n\n    const responseOptions = buildResponseOptions(response);\n\n    fetchMock.mock(\n      matchingFunction(defaultedConfig, request, response),\n      buildResponseOptions(response),\n      buildFetchMockConfig(request, defaultedConfig, repeatMap),\n    ).catch(async (...args) => {\n      if (defaultedConfig.debuggingEnabled) {\n        const { url, config: fetchConfig } = extractFetchArguments(args);\n        const builtRequest = buildRequest(url, fetchConfig, responseOptions, responseOptions.body);\n\n        await submitRequestData(builtRequest, defaultedConfig.debugPort, false);\n      }\n\n      console.error('Unable to match request');\n    });\n  });\n};\n"]}