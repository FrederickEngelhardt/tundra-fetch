{"version":3,"sources":["../../src/stringSimilarity.test.js"],"names":["describe","WILDCARD","it","expect","toBe","undefined"],"mappings":";;AAAA;;;;;;AAEAA,SAAS,kBAAT,EAA6B,YAAM;AACjC,MAAMC,WAAW,OAAjB;;AAEAC,KAAG,4CAAH,EAAiD,YAAM;AACrDC,WAAO,2CAA0BF,QAA1B,YAA2C,sBAA3C,CAAP,EAA2EG,IAA3E,CAAgF,IAAhF;AACD,GAFD;;AAIAF,KAAG,6DAAH,EAAkE,YAAM;AACtEC,WAAO,gCAAoBF,QAApB,YAAqC,gBAArC,CAAP,EAA+DG,IAA/D,CAAoE,IAApE;AACD,GAFD;;AAIAF,KAAG,uDAAH,EAA4D,YAAM;AAChEC,WAAO,2CAA0BF,QAA1B,EAAsC,iBAAtC,CAAP,EAAiEG,IAAjE,CAAsE,IAAtE;AACD,GAFD;;AAIAF,KAAG,iDAAH,EAAsD,YAAM;AAC1DC,WAAO,2CAA0BF,QAA1B,YAA2C,aAA3C,CAAP,EAAkEG,IAAlE,CAAuE,IAAvE;AACD,GAFD;;AAIAF,KAAG,2DAAH,EAAgE,YAAM;AACpEC,WAAO,gCAAiB,SAAjB,EAA4B,SAA5B,CAAP,EAA+CC,IAA/C,CAAoD,IAApD;AACD,GAFD;;AAIAF,KAAG,+DAAH,EAAoE,YAAM;AACxEC,WAAO,gCAAiB,SAAjB,EAA4B,SAA5B,CAAP,EAA+CC,IAA/C,CAAoD,KAApD;AACD,GAFD;;AAIAF,KAAG,gDAAH,EAAqD,YAAM;AACzDC,WAAO,gCAAiB,EAAjB,EAAqB,WAArB,CAAP,EAA0CC,IAA1C,CAA+C,KAA/C;AACD,GAFD;;AAIAF,KAAG,0DAAH,EAA+D,YAAM;AACnEC,WAAO,qCAAoBF,QAApB,EAAgC,EAAhC,CAAP,EAA4CG,IAA5C,CAAiD,IAAjD;AACD,GAFD;;AAIAF,KAAG,yDAAH,EAA8D,YAAM;AAClEC,WAAO,qCAAoBF,QAApB,EAAgC,IAAhC,CAAP,EAA8CG,IAA9C,CAAmD,IAAnD;AACD,GAFD;;AAIAF,KAAG,qDAAH,EAA0D,YAAM;AAC9DC,WAAO,gCAAiB,IAAjB,EAAuB,IAAvB,CAAP,EAAqCC,IAArC,CAA0C,IAA1C;AACD,GAFD;;AAIAF,KAAG,kEAAH,EAAuE,YAAM;AAC3EC,WAAO,gCAAiB,IAAjB,EAAuBE,SAAvB,CAAP,EAA0CD,IAA1C,CAA+C,KAA/C;AACD,GAFD;;AAIAF,KAAG,kEAAH,EAAuE,YAAM;AAC3EC,WAAO,gCAAiB,IAAjB,EAAuB,WAAvB,CAAP,EAA4CC,IAA5C,CAAiD,KAAjD;AACD,GAFD;;AAIAF,KAAG,kEAAH,EAAuE,YAAM;AAC3EC,WAAO,0CAAyBF,QAAzB,0BAAwD,8BAAxD,CAAP,EAAgGG,IAAhG,CAAqG,IAArG;AACD,GAFD;;AAIAF,KAAG,wGAAH,EAA6G,YAAM;AACjHC,WAAO,0CAAyBF,QAAzB,YAA0C,gBAA1C,CAAP,EAAoEG,IAApE,CAAyE,KAAzE;AACD,GAFD;;AAIAF,KAAG,uFAAH,EAA4F,YAAM;AAChGC,WAAO,0DAAyCF,QAAzC,EAAqD,0BAArD,CAAP,EAAyFG,IAAzF,CAA8F,IAA9F;AACD,GAFD;AAGD,CA9DD","file":"stringSimilarity.test.js","sourcesContent":["import stringSimilarity from './stringSimilarity';\n\ndescribe('stringSimilarity', () => {\n  const WILDCARD = '{{*}}';\n\n  it('should match a target with a valid pattern', () => {\n    expect(stringSimilarity(`before${WILDCARD}after`, 'beforesomethingafter')).toBe(true);\n  });\n\n  it('should match a target with a valid pattern at the beginning', () => {\n    expect(stringSimilarity(`${WILDCARD}after`, 'somethingafter')).toBe(true);\n  });\n\n  it('should match a target with a valid pattern at the end', () => {\n    expect(stringSimilarity(`before${WILDCARD}`, 'beforesomething')).toBe(true);\n  });\n\n  it('should match a target without populated pattern', () => {\n    expect(stringSimilarity(`before${WILDCARD}after`, 'beforeafter')).toBe(true);\n  });\n\n  it('should match a target against a source without a wildcard', () => {\n    expect(stringSimilarity('string1', 'string1')).toBe(true);\n  });\n\n  it('should not match a target against a source without a wildcard', () => {\n    expect(stringSimilarity('string1', 'string2')).toBe(false);\n  });\n\n  it('should not match a target with an empty source', () => {\n    expect(stringSimilarity('', 'something')).toBe(false);\n  });\n\n  it('should match an empty target against a wildcarded source', () => {\n    expect(stringSimilarity(`${WILDCARD}`, '')).toBe(true);\n  });\n\n  it('should match an null target against a wildcarded source', () => {\n    expect(stringSimilarity(`${WILDCARD}`, null)).toBe(true);\n  });\n\n  it('should match if the source and target are both null', () => {\n    expect(stringSimilarity(null, null)).toBe(true);\n  });\n\n  it('should not match if the source and target are undefined and null', () => {\n    expect(stringSimilarity(null, undefined)).toBe(false);\n  });\n\n  it('should not match if the source and target are undefined and null', () => {\n    expect(stringSimilarity(null, 'something')).toBe(false);\n  });\n\n  it('should match a target with asterisks against a wildcarded source', () => {\n    expect(stringSimilarity(`Some ${WILDCARD} with asterisks ***`, 'Some text with asterisks ***')).toBe(true);\n  });\n\n  it('should not match target with asterisk within a char group against a wildcarded source without asterisk', () => {\n    expect(stringSimilarity(`This ${WILDCARD} a t*`, 'This is a test')).toBe(false);\n  });\n\n  it('should match a target against a source that wildcards the asterisks within the target', () => {\n    expect(stringSimilarity(`These are asterisks: ${WILDCARD}`, 'These are asterisks: ***')).toBe(true);\n  });\n});\n"]}