{"version":3,"sources":["../../src/replay.test.js"],"names":["emptyProfile","require","singleRequest","multipleRequests","jest","mock","reset","fn","describe","profileRequest","requestURL","requestConfig","beforeEach","method","url","headers","abc","xyz","content","body","it","expect","toBe","calls","toMatchSnapshot","headersToOmit","response","statusCode","config","debuggingEnabled","debugPort","resetAllMocks","mockImplementation","catch","toBeCalled","toEqual","repeatMode","Promise","reject","request","not","toHaveBeenCalled"],"mappings":"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","file":"replay.test.js","sourcesContent":["import fetchMock from 'fetch-mock';\nimport replay, { matchingFunction } from './replay';\nimport { WILDCARD_MARKER } from './stringSimilarity';\nimport submitRequestData from './submitRequest';\n\nconst emptyProfile = require('./fixtures/profiles/no-requests');\nconst singleRequest = require('./fixtures/profiles/single-request');\nconst multipleRequests = require('./fixtures/profiles/multiple-requests');\n\njest.mock('fetch-mock', () => ({\n  reset: jest.fn(),\n  mock: jest.fn(),\n}));\n\njest.mock('./submitRequest', () => jest.fn());\n\ndescribe('replay', () => {\n  describe('matchingFunction', () => {\n    let profileRequest;\n    let requestURL;\n    let requestConfig;\n\n    beforeEach(() => {\n      profileRequest = {\n        method: 'GET',\n        url: 'http://www.someurl.com',\n        headers: {\n          abc: ['123'],\n          xyz: ['456'],\n        },\n        content: 'body',\n      };\n\n      requestURL = 'http://www.someurl.com';\n      requestConfig = {\n        method: 'GET',\n        headers: {\n          abc: ['123'],\n          xyz: ['456'],\n        },\n        body: 'body',\n      };\n    });\n\n    it('should match a standard request on all factors and an empty matching config', () => {\n      expect(matchingFunction({}, profileRequest)(requestURL, requestConfig)).toBe(true);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should match a standard request on all factors and a null matching config', () => {\n      expect(matchingFunction(null, profileRequest)(requestURL, requestConfig)).toBe(true);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should match a standard request on all factors and a matching config with headers to omit', () => {\n      profileRequest.headers.xyz = 'something else';\n      expect(matchingFunction({ headersToOmit: ['xyz'] }, profileRequest)(requestURL, requestConfig)).toBe(true);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should match a standard request on all factors and a matching config with debugging enabled', () => {\n      const response = {\n        content: 'body',\n        headers: { 1: ['1'], 2: ['2'] },\n        statusCode: 200,\n      };\n      const config = { debuggingEnabled: true, debugPort: 9091 };\n\n      expect(matchingFunction(config, profileRequest, response)(requestURL, requestConfig)).toBe(true);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should match a standard request on all factors with a fuzzy url', () => {\n      profileRequest.url = `http://www.${WILDCARD_MARKER}.com`;\n      expect(matchingFunction({}, profileRequest)(requestURL, requestConfig)).toBe(true);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should match a standard request on all factors with a fuzzy header', () => {\n      profileRequest.headers.abc = [`1${WILDCARD_MARKER}3`];\n      expect(matchingFunction({}, profileRequest)(requestURL, requestConfig)).toBe(true);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should match a standard request on all factors with a fuzzy body', () => {\n      profileRequest.body = `b${WILDCARD_MARKER}y`;\n      expect(matchingFunction({}, profileRequest)(requestURL, requestConfig)).toBe(true);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should not match a standard request because the URL doesn\\'t match', () => {\n      profileRequest.url = 'bad';\n      expect(matchingFunction({}, profileRequest)(requestURL, requestConfig)).toBe(false);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should not match a standard request because the headers don\\'t match', () => {\n      profileRequest.headers.abc = 'bad';\n      expect(matchingFunction({}, profileRequest)(requestURL, requestConfig)).toBe(false);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should not match a standard request because the method doesn\\'t match', () => {\n      profileRequest.method = 'bad';\n      expect(matchingFunction({}, profileRequest)(requestURL, requestConfig)).toBe(false);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should not match a standard request because the body doesn\\'t match', () => {\n      profileRequest.content = 'bad';\n      expect(matchingFunction({}, profileRequest)(requestURL, requestConfig)).toBe(false);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n  });\n\n  describe('default', () => {\n    beforeEach(() => {\n      jest.resetAllMocks();\n      fetchMock.mock.mockImplementation(() => ({ catch: jest.fn() }));\n    });\n\n    it('should mock requests for an empty profile', () => {\n      replay(emptyProfile, {});\n\n      expect(fetchMock.reset).toBeCalled();\n      expect(fetchMock.mock.mock.calls).toEqual([]);\n    });\n\n    it('should mock requests for a profile with a single request', () => {\n      replay(singleRequest, {});\n\n      expect(fetchMock.reset).toBeCalled();\n      expect(fetchMock.mock.mock.calls).toMatchSnapshot();\n    });\n\n    it('should mock requests for a profile with two requests and the default repeat mode', () => {\n      replay(multipleRequests, {});\n\n      expect(fetchMock.reset).toBeCalled();\n      expect(fetchMock.mock.mock.calls).toMatchSnapshot();\n    });\n\n    it('should mock requests for a profile with two requests and a repeat mode of \\'first\\'', () => {\n      replay(multipleRequests, { repeatMode: 'first' });\n\n      expect(fetchMock.reset).toBeCalled();\n      expect(fetchMock.mock.mock.calls).toMatchSnapshot();\n    });\n\n    it('should mock requests for a profile with two requests and a repeat mode of \\'last\\'', () => {\n      replay(multipleRequests, { repeatMode: 'last' });\n\n      expect(fetchMock.reset).toBeCalled();\n      expect(fetchMock.mock.mock.calls).toMatchSnapshot();\n    });\n\n    it('should catch unmatched requests without debugging enabled', () => {\n      fetchMock.mock.mockImplementation(() => new Promise((response, reject) => reject(singleRequest[0].request)));\n\n      replay(singleRequest, {});\n\n      expect(fetchMock.reset).toBeCalled();\n      expect(submitRequestData).not.toHaveBeenCalled();\n    });\n\n    it('should catch unmatched requests with debugging enabled', async () => {\n      fetchMock.mock.mockImplementation(() => new Promise((response, reject) => reject(singleRequest[0].request)));\n\n      replay(singleRequest, { debuggingEnabled: true, debugPort: 9091 });\n\n      expect(fetchMock.reset).toBeCalled();\n      expect(await submitRequestData.mock.calls).toMatchSnapshot();\n    });\n  });\n});\n"]}