{"version":3,"sources":["../../src/replay.test.js"],"names":["emptyProfile","require","singleRequest","multipleRequests","jest","mock","reset","fn","describe","profileRequest","requestURL","requestConfig","beforeEach","method","url","headers","abc","xyz","content","body","it","expect","toBe","headersToOmit","resetAllMocks","toBeCalled","calls","toEqual","toMatchSnapshot","repeatMode"],"mappings":"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","file":"replay.test.js","sourcesContent":["import fetchMock from 'fetch-mock';\nimport replay, { matchingFunction } from './replay';\nimport { WILDCARD_MARKER } from './stringSimilarity';\n\nconst emptyProfile = require('./fixtures/profiles/no-requests');\nconst singleRequest = require('./fixtures/profiles/single-request');\nconst multipleRequests = require('./fixtures/profiles/multiple-requests');\n\njest.mock('fetch-mock', () => ({\n  reset: jest.fn(),\n  mock: jest.fn(),\n}));\n\ndescribe('replay', () => {\n  describe('matchingFunction', () => {\n    let profileRequest;\n    let requestURL;\n    let requestConfig;\n\n    beforeEach(() => {\n      profileRequest = {\n        method: 'GET',\n        url: 'http://www.someurl.com',\n        headers: {\n          abc: ['123'],\n          xyz: ['456'],\n        },\n        content: 'body',\n      };\n\n      requestURL = 'http://www.someurl.com';\n      requestConfig = {\n        method: 'GET',\n        headers: {\n          abc: ['123'],\n          xyz: ['456'],\n        },\n        body: 'body',\n      };\n    });\n\n    it('should match a standard request on all factors and an empty matching config', () => {\n      expect(matchingFunction({}, profileRequest)(requestURL, requestConfig)).toBe(true);\n    });\n\n    it('should match a standard request on all factors and a null matching config', () => {\n      expect(matchingFunction(null, profileRequest)(requestURL, requestConfig)).toBe(true);\n    });\n\n    it('should match a standard request on all factors and a matching config with headers to omit', () => {\n      profileRequest.headers.xyz = 'something else';\n      expect(matchingFunction({ headersToOmit: ['xyz'] }, profileRequest)(requestURL, requestConfig)).toBe(true);\n    });\n\n    it('should match a standard request on all factors with a fuzzy url', () => {\n      profileRequest.url = `http://www.${WILDCARD_MARKER}.com`;\n      expect(matchingFunction({}, profileRequest)(requestURL, requestConfig)).toBe(true);\n    });\n\n    it('should match a standard request on all factors with a fuzzy header', () => {\n      profileRequest.headers.abc = [`1${WILDCARD_MARKER}3`];\n      expect(matchingFunction({}, profileRequest)(requestURL, requestConfig)).toBe(true);\n    });\n\n    it('should match a standard request on all factors with a fuzzy body', () => {\n      profileRequest.body = `b${WILDCARD_MARKER}y`;\n      expect(matchingFunction({}, profileRequest)(requestURL, requestConfig)).toBe(true);\n    });\n\n    it('should not match a standard request because the URL doesn\\'t match', () => {\n      profileRequest.url = 'bad';\n      expect(matchingFunction({}, profileRequest)(requestURL, requestConfig)).toBe(false);\n    });\n\n    it('should not match a standard request because the headers don\\'t match', () => {\n      profileRequest.headers.abc = 'bad';\n      expect(matchingFunction({}, profileRequest)(requestURL, requestConfig)).toBe(false);\n    });\n\n    it('should not match a standard request because the method doesn\\'t match', () => {\n      profileRequest.method = 'bad';\n      expect(matchingFunction({}, profileRequest)(requestURL, requestConfig)).toBe(false);\n    });\n\n    it('should not match a standard request because the body doesn\\'t match', () => {\n      profileRequest.content = 'bad';\n      expect(matchingFunction({}, profileRequest)(requestURL, requestConfig)).toBe(false);\n    });\n  });\n\n  describe('default', () => {\n    beforeEach(() => {\n      jest.resetAllMocks();\n    });\n\n    it('should mock requests for an empty profile', () => {\n      replay(emptyProfile, {});\n\n      expect(fetchMock.reset).toBeCalled();\n      expect(fetchMock.mock.mock.calls).toEqual([]);\n    });\n\n    it('should mock requests for an profile with a single request', () => {\n      replay(singleRequest, {});\n\n      expect(fetchMock.reset).toBeCalled();\n      expect(fetchMock.mock.mock.calls).toMatchSnapshot();\n    });\n\n    it('should mock requests for an profile with two requests and the default repeat mode', () => {\n      replay(multipleRequests, {});\n\n      expect(fetchMock.reset).toBeCalled();\n      expect(fetchMock.mock.mock.calls).toMatchSnapshot();\n    });\n\n    it('should mock requests for an profile with two requests and a repeat mode of \\'first\\'', () => {\n      replay(multipleRequests, { repeatMode: 'first' });\n\n      expect(fetchMock.reset).toBeCalled();\n      expect(fetchMock.mock.mock.calls).toMatchSnapshot();\n    });\n\n    it('should mock requests for an profile with two requests and a repeat mode of \\'last\\'', () => {\n      replay(multipleRequests, { repeatMode: 'last' });\n\n      expect(fetchMock.reset).toBeCalled();\n      expect(fetchMock.mock.mock.calls).toMatchSnapshot();\n    });\n  });\n});\n"]}