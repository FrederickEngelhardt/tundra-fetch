{"version":3,"sources":["../../src/fetchArgumentExtractor.js"],"names":["fetchParams","singleParameter","length","undefinedSecondParameter","undefined","isString","url","config","method","isObject","Error","value","String","Object"],"mappings":";;;;;;;;kBAIe,UAAUA,WAAV,EAAuB;AACpC,MAAMC,kBAAkBD,eAAeA,YAAYE,MAAZ,KAAuB,CAA9D;AACA,MAAMC,2BAA2BH,eAAeA,YAAYE,MAAZ,KAAuB,CAAtC,IAA2CF,YAAY,CAAZ,MAAmBI,SAA/F;;AAEA,MAAIH,mBAAmBE,wBAAvB,EAAiD;AAC/C;AACA,QAAIE,SAASL,YAAY,CAAZ,CAAT,CAAJ,EAA8B;AAC5B,aAAO;AACLM,aAAKN,YAAY,CAAZ,CADA;AAELO,gBAAQ;AACNC,kBAAQ;AADF;AAFH,OAAP;AAMD;AACD;AACA,QAAIC,SAAST,YAAY,CAAZ,CAAT,CAAJ,EAA8B;AAC5B,aAAO;AACLM,aAAKN,YAAY,CAAZ,EAAeM,GADf;AAELC,gBAAQP,YAAY,CAAZ;AAFH,OAAP;AAID;AACF;;AAED,MAAIA,eAAeA,YAAYE,MAAZ,KAAuB,CAA1C,EAA6C;AAC3C;AACA,QAAIG,SAASL,YAAY,CAAZ,CAAT,KAA4BS,SAAST,YAAY,CAAZ,CAAT,CAAhC,EAA0D;AACxD,aAAO;AACLM,aAAKN,YAAY,CAAZ,CADA;AAELO,gBAAQP,YAAY,CAAZ;AAFH,OAAP;AAID;AACF;;AAED,QAAMU,iDAA+CV,WAA/C,CAAN;AACD,C;;AAtCD,IAAMK,WAAW,SAAXA,QAAW;AAAA,SAAS,OAAOM,KAAP,KAAiB,QAAjB,IAA6BA,iBAAiBC,MAAvD;AAAA,CAAjB;;AAEA,IAAMH,WAAW,SAAXA,QAAW;AAAA,SAAS,QAAOE,KAAP,yCAAOA,KAAP,OAAiB,QAAjB,IAA6BA,iBAAiBE,MAAvD;AAAA,CAAjB","file":"fetchArgumentExtractor.js","sourcesContent":["const isString = value => typeof value === 'string' || value instanceof String;\n\nconst isObject = value => typeof value === 'object' || value instanceof Object;\n\nexport default function (fetchParams) {\n  const singleParameter = fetchParams && fetchParams.length === 1;\n  const undefinedSecondParameter = fetchParams && fetchParams.length === 2 && fetchParams[1] === undefined;\n\n  if (singleParameter || undefinedSecondParameter) {\n    // Scenario: fetch('url')\n    if (isString(fetchParams[0])) {\n      return {\n        url: fetchParams[0],\n        config: {\n          method: 'GET',\n        },\n      };\n    }\n    // Scenario: fetch({ url: 'url', method: 'GET' })\n    if (isObject(fetchParams[0])) {\n      return {\n        url: fetchParams[0].url,\n        config: fetchParams[0],\n      };\n    }\n  }\n\n  if (fetchParams && fetchParams.length === 2) {\n    // Scenario: fetch('url', { method: 'GET' })\n    if (isString(fetchParams[0]) && isObject(fetchParams[1])) {\n      return {\n        url: fetchParams[0],\n        config: fetchParams[1],\n      };\n    }\n  }\n\n  throw Error(`Unknown fetch argument configuration: ${fetchParams}`);\n}\n"]}