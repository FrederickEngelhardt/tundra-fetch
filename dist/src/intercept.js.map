{"version":3,"sources":["../../src/intercept.js"],"names":["_fetch","requestURL","requestConfig","response","responseBody","port","capturedRequest","buildRequest","request","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","submitRequestData","url","headers","method","content","body","map","statusCode","status","callback","originalfetch","global","fetch","interceptFetch","fetchParams","config","apply","arguments","then","data","clone","json","console","error"],"mappings":";;;;;;;qEAgBA,iBAAiCA,MAAjC,EAAyCC,UAAzC,EAAqDC,aAArD,EAAoEC,QAApE,EAA8EC,YAA9E,EAA4FC,IAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,2BADR,GAC0BC,aAAaN,UAAb,EAAyBC,aAAzB,EAAwCC,QAAxC,EAAkDC,YAAlD,CAD1B;;AAGE;AACA;;AACMI,mBALR,GAKkB,IAAIC,cAAJ,EALlB,EAKwC;;AAEtCD,oBAAQE,IAAR,CAAa,MAAb,wBAAyCL,IAAzC;AACAG,oBAAQG,gBAAR,CAAyB,cAAzB,EAAyC,kBAAzC;AACAH,oBAAQI,IAAR,CAAaC,KAAKC,SAAL,CAAeR,eAAf,CAAb;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeS,iB;;;;;AAhBf;;;;;;;;AAEA,IAAMR,eAAe,SAAfA,YAAe,CAACN,UAAD,EAAaC,aAAb,EAA4BC,QAA5B,EAAsCC,YAAtC;AAAA,SAAwD;AAC3EI,aAAS;AACPQ,WAAKf,UADE;AAEPgB,eAASf,cAAce,OAFhB;AAGPC,cAAQhB,cAAcgB,MAHf;AAIPC,eAASjB,cAAckB;AAJhB,KADkE;AAO3EjB,cAAU;AACRc,eAASd,SAASc,OAAT,CAAiBI,GADlB;AAERC,kBAAYnB,SAASoB,MAFb;AAGRJ,eAASf;AAHD;AAPiE,GAAxD;AAAA,CAArB;;kBA0Be,UAACC,IAAD,EAAOmB,QAAP,EAAoB;AACjC,MAAMC,gBAAgBC,OAAOC,KAA7B;AACAD,SAAOC,KAAP,GAAe,SAASC,cAAT,GAAwC;AAAA;;AAAA,sCAAbC,WAAa;AAAbA,iBAAa;AAAA;;AAAA,gCAC7B,sCAAsBA,WAAtB,CAD6B;AAAA,QAC7Cb,GAD6C,yBAC7CA,GAD6C;AAAA,QACxCc,MADwC,yBACxCA,MADwC;;AAGrD,WAAOL,cAAcM,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,EAAqCC,IAArC;AAAA,0EAA0C,kBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAElBA,KAAKC,KAAL,GAAaC,IAAb,EAFkB;;AAAA;AAEvChC,4BAFuC;AAAA;AAAA,uBAGvCW,kBAAkBU,aAAlB,EAAiCT,GAAjC,EAAsCc,MAAtC,EAA8CI,IAA9C,EAAoD9B,YAApD,EAAkEC,IAAlE,CAHuC;;AAAA;AAI7C,oBAAImB,QAAJ,EAAcA,SAASjB,aAAaS,GAAb,EAAkBc,MAAlB,EAA0BI,IAA1B,EAAgC9B,YAAhC,CAAT;AAJ+B;AAAA;;AAAA;AAAA;AAAA;;AAM7CiC,wBAAQC,KAAR,CAAc,iCAAd;AACAD,wBAAQC,KAAR;;AAP6C;AAAA,kDAUxCJ,IAVwC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA1C;;AAAA;AAAA;AAAA;AAAA,QAAP;AAYD,GAfD;AAgBD,C","file":"intercept.js","sourcesContent":["import extractFetchArguments from './fetchArgumentExtractor';\n\nconst buildRequest = (requestURL, requestConfig, response, responseBody) => ({\n  request: {\n    url: requestURL,\n    headers: requestConfig.headers,\n    method: requestConfig.method,\n    content: requestConfig.body,\n  },\n  response: {\n    headers: response.headers.map,\n    statusCode: response.status,\n    content: responseBody,\n  },\n});\n\nasync function submitRequestData(_fetch, requestURL, requestConfig, response, responseBody, port) {\n  const capturedRequest = buildRequest(requestURL, requestConfig, response, responseBody);\n\n  // Using XMLHttpRequest to not interfere with the overwritten fetch object.\n  // Sending in a fire-and-forget fashion.\n  const request = new XMLHttpRequest(); // eslint-disable-line no-undef\n\n  request.open('POST', `http://localhost:${port}/requests`);\n  request.setRequestHeader('Content-Type', 'application/json');\n  request.send(JSON.stringify(capturedRequest));\n}\n\nexport default (port, callback) => {\n  const originalfetch = global.fetch;\n  global.fetch = function interceptFetch(...fetchParams) {\n    const { url, config } = extractFetchArguments(fetchParams);\n\n    return originalfetch.apply(this, arguments).then(async (data) => { // eslint-disable-line prefer-rest-params\n      try {\n        const responseBody = await data.clone().json();\n        await submitRequestData(originalfetch, url, config, data, responseBody, port);\n        if (callback) callback(buildRequest(url, config, data, responseBody));\n      } catch (error) {\n        console.error('Error wiretapping fetch request');\n        console.error(error);\n      }\n\n      return data;\n    });\n  };\n};\n"]}