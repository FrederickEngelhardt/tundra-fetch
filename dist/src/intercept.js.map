{"version":3,"sources":["../../src/intercept.js"],"names":["port","callback","originalfetch","global","fetch","interceptFetch","fetchParams","url","config","apply","arguments","then","data","clone","json","responseBody","builtRequest","response","headers","map","console","error"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;kBAEe,UAACA,IAAD,EAAOC,QAAP,EAAoB;AACjC,MAAMC,gBAAgBC,OAAOC,KAA7B;AACAD,SAAOC,KAAP,GAAe,SAASC,cAAT,GAAwC;AAAA;;AAAA,sCAAbC,WAAa;AAAbA,iBAAa;AAAA;;AAAA,gCAC7B,sCAAsBA,WAAtB,CAD6B;AAAA,QAC7CC,GAD6C,yBAC7CA,GAD6C;AAAA,QACxCC,MADwC,yBACxCA,MADwC;;AAGrD,WAAON,cAAcO,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,EAAqCC,IAArC;AAAA,yEAA0C,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAElBA,KAAKC,KAAL,GAAaC,IAAb,EAFkB;;AAAA;AAEvCC,4BAFuC;AAGvCC,4BAHuC,GAGxB,8BAAaT,GAAb,EAAkBC,MAAlB,EAA0BI,IAA1B,EAAgCG,YAAhC,CAHwB;;AAK7C;;AACA,oBAAIC,aAAaC,QAAb,CAAsBC,OAA1B,EAAmC;AACjCF,+BAAaC,QAAb,CAAsBC,OAAtB,GAAgCF,aAAaC,QAAb,CAAsBC,OAAtB,CAA8BC,GAA9D;AACD;;AAR4C;AAAA,uBAUvC,6BAAkBH,YAAlB,EAAgChB,IAAhC,CAVuC;;AAAA;;AAY7C,oBAAIC,QAAJ,EAAcA,SAASe,YAAT;AAZ+B;AAAA;;AAAA;AAAA;AAAA;;AAc7CI,wBAAQC,KAAR,CAAc,iCAAd;AACAD,wBAAQC,KAAR;;AAf6C;AAAA,iDAkBxCT,IAlBwC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA1C;;AAAA;AAAA;AAAA;AAAA,QAAP;AAoBD,GAvBD;AAwBD,C","file":"intercept.js","sourcesContent":["import extractFetchArguments from './fetchArgumentExtractor';\nimport submitRequestData from './submitRequest';\nimport buildRequest from './requestBuilder';\n\nexport default (port, callback) => {\n  const originalfetch = global.fetch;\n  global.fetch = function interceptFetch(...fetchParams) {\n    const { url, config } = extractFetchArguments(fetchParams);\n\n    return originalfetch.apply(this, arguments).then(async (data) => { // eslint-disable-line prefer-rest-params\n      try {\n        const responseBody = await data.clone().json();\n        const builtRequest = buildRequest(url, config, data, responseBody);\n\n        // Fetch stores the headers in a map. We need to reset it to the inner map structure to get the right value\n        if (builtRequest.response.headers) {\n          builtRequest.response.headers = builtRequest.response.headers.map;\n        }\n\n        await submitRequestData(builtRequest, port);\n\n        if (callback) callback(builtRequest);\n      } catch (error) {\n        console.error('Error wiretapping fetch request');\n        console.error(error);\n      }\n\n      return data;\n    });\n  };\n};\n"]}