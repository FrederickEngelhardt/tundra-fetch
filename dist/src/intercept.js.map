{"version":3,"sources":["../../src/intercept.js"],"names":["_fetch","requestURL","requestConfig","response","responseBody","port","capturedRequest","request","url","headers","method","content","body","map","statusCode","status","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","submitRequestData","originalfetch","global","fetch","interceptFetch","fetchParams","config","apply","arguments","then","data","clone","json","console","error"],"mappings":";;;;;;;qEAEA,iBAAiCA,MAAjC,EAAyCC,UAAzC,EAAqDC,aAArD,EAAoEC,QAApE,EAA8EC,YAA9E,EAA4FC,IAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,2BADR,GAC0B;AACtBC,uBAAS;AACPC,qBAAKP,UADE;AAEPQ,yBAASP,cAAcO,OAFhB;AAGPC,wBAAQR,cAAcQ,MAHf;AAIPC,yBAAST,cAAcU;AAJhB,eADa;AAOtBT,wBAAU;AACRM,yBAASN,SAASM,OAAT,CAAiBI,GADlB;AAERC,4BAAYX,SAASY,MAFb;AAGRJ,yBAASP;AAHD;AAPY,aAD1B;;AAeE;AACA;;AACMG,mBAjBR,GAiBkB,IAAIS,cAAJ,EAjBlB,EAiBwC;;AAEtCT,oBAAQU,IAAR,CAAa,MAAb,wBAAyCZ,IAAzC;AACAE,oBAAQW,gBAAR,CAAyB,cAAzB,EAAyC,kBAAzC;AACAX,oBAAQY,IAAR,CAAaC,KAAKC,SAAL,CAAef,eAAf,CAAb;;AArBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAegB,iB;;;;;AAFf;;;;;;;;kBA0Be,UAACjB,IAAD,EAAU;AACvB,MAAMkB,gBAAgBC,OAAOC,KAA7B;AACAD,SAAOC,KAAP,GAAe,SAASC,cAAT,GAAwC;AAAA;;AAAA,sCAAbC,WAAa;AAAbA,iBAAa;AAAA;;AAAA,gCAC7B,sCAAsBA,WAAtB,CAD6B;AAAA,QAC7CnB,GAD6C,yBAC7CA,GAD6C;AAAA,QACxCoB,MADwC,yBACxCA,MADwC;;AAGrD,WAAOL,cAAcM,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,EAAqCC,IAArC;AAAA,0EAA0C,kBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAElBA,KAAKC,KAAL,GAAaC,IAAb,EAFkB;;AAAA;AAEvC9B,4BAFuC;AAAA;AAAA,uBAGvCkB,kBAAkBC,aAAlB,EAAiCf,GAAjC,EAAsCoB,MAAtC,EAA8CI,IAA9C,EAAoD5B,YAApD,EAAkEC,IAAlE,CAHuC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAK7C8B,wBAAQC,KAAR,CAAc,iCAAd;AACAD,wBAAQC,KAAR;;AAN6C;AAAA,kDASxCJ,IATwC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA1C;;AAAA;AAAA;AAAA;AAAA,QAAP;AAWD,GAdD;AAeD,C","file":"intercept.js","sourcesContent":["import extractFetchArguments from './fetchArgumentExtractor';\n\nasync function submitRequestData(_fetch, requestURL, requestConfig, response, responseBody, port) {\n  const capturedRequest = {\n    request: {\n      url: requestURL,\n      headers: requestConfig.headers,\n      method: requestConfig.method,\n      content: requestConfig.body,\n    },\n    response: {\n      headers: response.headers.map,\n      statusCode: response.status,\n      content: responseBody,\n    },\n  };\n\n  // Using XMLHttpRequest to not interfere with the overwritten fetch object.\n  // Sending in a fire-and-forget fashion.\n  const request = new XMLHttpRequest(); // eslint-disable-line no-undef\n\n  request.open('POST', `http://localhost:${port}/requests`);\n  request.setRequestHeader('Content-Type', 'application/json');\n  request.send(JSON.stringify(capturedRequest));\n}\n\nexport default (port) => {\n  const originalfetch = global.fetch;\n  global.fetch = function interceptFetch(...fetchParams) {\n    const { url, config } = extractFetchArguments(fetchParams);\n\n    return originalfetch.apply(this, arguments).then(async (data) => { // eslint-disable-line prefer-rest-params\n      try {\n        const responseBody = await data.clone().json();\n        await submitRequestData(originalfetch, url, config, data, responseBody, port);\n      } catch (error) {\n        console.error('Error wiretapping fetch request');\n        console.error(error);\n      }\n\n      return data;\n    });\n  };\n};\n"]}