{"version":3,"sources":["../../src/intercept.test.js"],"names":["jest","mock","fn","describe","callback","beforeEach","restore","clearAllMocks","it","get","data","global","fetch","json","response","expect","toEqual","calls","toMatchSnapshot","toHaveBeenCalled","body","headers","some","options","method","interceptedCalls","post","push","request","length","toBe","url","content","undefined","statusCode"],"mappings":"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","file":"intercept.test.js","sourcesContent":["import fetchMock from 'fetch-mock';\nimport interceptFetchCalls from './intercept';\nimport submitRequest from './submitRequest';\n\njest.mock('./submitRequest', () => jest.fn());\n\ndescribe('intercept', () => {\n  const callback = jest.fn();\n\n  beforeEach(() => {\n    fetchMock.restore();\n    jest.clearAllMocks();\n  });\n\n  it('should intercept a plain url', async () => {\n    fetchMock.get('http://someurl.com', { data: 'abc123' });\n    interceptFetchCalls(12345, callback);\n\n    const response = await (await global.fetch('http://someurl.com')).json();\n\n    expect(response).toEqual({ data: 'abc123' });\n    expect(submitRequest.mock.calls).toMatchSnapshot();\n    expect(callback).toHaveBeenCalled();\n  });\n\n  it('should intercept a request with an empty response body - e.g. 204', async () => {\n    fetchMock.get('http://someurl.com', 204);\n    interceptFetchCalls(12345, callback);\n\n    const response = await (await global.fetch('http://someurl.com')).body;\n\n    expect(response).toEqual(null);\n    expect(submitRequest.mock.calls).toMatchSnapshot();\n    expect(callback).toHaveBeenCalled();\n  });\n\n  it('should intercept a request with a non-json response body', async () => {\n    fetchMock.get('http://someurl.com', 'abc123');\n    interceptFetchCalls(12345, callback);\n\n    const response = await (await global.fetch('http://someurl.com')).body;\n\n    expect(response).toEqual('abc123');\n    expect(submitRequest.mock.calls).toMatchSnapshot();\n    expect(callback).toHaveBeenCalled();\n  });\n\n  it('should intercept a url with custom options', async () => {\n    const headers = { some: 'header' };\n    const options = {\n      method: 'GET',\n      headers,\n    };\n\n    fetchMock.get('http://someurl.com', { data: 'abc123' }, { headers });\n    interceptFetchCalls(12345, callback);\n\n    const response = await (await global.fetch('http://someurl.com', options)).json();\n\n    expect(response).toEqual({ data: 'abc123' });\n    expect(submitRequest.mock.calls).toMatchSnapshot();\n    expect(callback).toHaveBeenCalled();\n  });\n\n  it('should intercept a POST fetch with a json body', async () => {\n    const body = { some: 'request body' };\n    const headers = { some: 'header' };\n    const interceptedCalls = [];\n\n    fetchMock.post('http://someurl.com', { data: 'abc123' }, { headers, body });\n    interceptFetchCalls(12345, request => interceptedCalls.push(request));\n\n    const options = {\n      method: 'POST',\n      headers,\n      body,\n    };\n\n    const response = await (await global.fetch('http://someurl.com', options)).json();\n\n    expect(response).toEqual({ data: 'abc123' });\n    expect(submitRequest.mock.calls).toMatchSnapshot();\n\n    expect(interceptedCalls.length).toBe(1);\n    expect(interceptedCalls[0]).toEqual({\n      request: {\n        url: 'http://someurl.com',\n        headers: { some: 'header' },\n        method: 'POST',\n        content: { some: 'request body' },\n      },\n      response: {\n        headers: undefined,\n        statusCode: 200,\n        content: { data: 'abc123' },\n      },\n    });\n  });\n});\n"]}