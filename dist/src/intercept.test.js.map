{"version":3,"sources":["../../src/intercept.test.js"],"names":["describe","beforeEach","restore","xmlHttpRequestMocks","open","jest","fn","send","setRequestHeader","global","XMLHttpRequest","it","get","data","fetch","json","response","expect","toEqual","toBeCalledWith","toMatchSnapshot","headers","some","options","method","body","post","mockImplementation","Error","console","error","mock","calls"],"mappings":"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","file":"intercept.test.js","sourcesContent":["import fetchMock from 'fetch-mock';\nimport interceptFetchCalls from './intercept';\n\ndescribe('intercept', () => {\n  beforeEach(() => {\n    fetchMock.restore();\n\n    const xmlHttpRequestMocks = {\n      open: jest.fn(),\n      send: jest.fn(),\n      setRequestHeader: jest.fn(),\n    };\n\n    global.XMLHttpRequest = () => xmlHttpRequestMocks;\n  });\n\n  it('should intercept a plain url', async () => {\n    fetchMock.get('http://someurl.com', { data: 'abc123' });\n    interceptFetchCalls(12345);\n\n    const response = await (await global.fetch('http://someurl.com')).json();\n\n    expect(response).toEqual({ data: 'abc123' });\n    expect(global.XMLHttpRequest().open).toBeCalledWith('POST', 'http://localhost:12345/requests');\n    expect(global.XMLHttpRequest().setRequestHeader).toBeCalledWith('Content-Type', 'application/json');\n    expect(global.XMLHttpRequest().send).toMatchSnapshot();\n  });\n\n  it('should intercept a url with custom options', async () => {\n    const headers = { some: 'header' };\n    const options = {\n      method: 'GET',\n      headers,\n    };\n\n    fetchMock.get('http://someurl.com', { data: 'abc123' }, { headers });\n    interceptFetchCalls(12345);\n\n    const response = await (await global.fetch('http://someurl.com', options)).json();\n\n    expect(response).toEqual({ data: 'abc123' });\n    expect(global.XMLHttpRequest().open).toBeCalledWith('POST', 'http://localhost:12345/requests');\n    expect(global.XMLHttpRequest().setRequestHeader).toBeCalledWith('Content-Type', 'application/json');\n    expect(global.XMLHttpRequest().send).toMatchSnapshot();\n  });\n\n  it('should intercept a POST fetch with a json body', async () => {\n    const body = { some: 'request body' };\n    const headers = { some: 'header' };\n\n    fetchMock.post('http://someurl.com', { data: 'abc123' }, { headers, body });\n    interceptFetchCalls(12345);\n\n    const options = {\n      method: 'POST',\n      headers,\n      body,\n    };\n\n    const response = await (await global.fetch('http://someurl.com', options)).json();\n\n    expect(response).toEqual({ data: 'abc123' });\n    expect(global.XMLHttpRequest().open).toBeCalledWith('POST', 'http://localhost:12345/requests');\n    expect(global.XMLHttpRequest().setRequestHeader).toBeCalledWith('Content-Type', 'application/json');\n    expect(global.XMLHttpRequest().send).toMatchSnapshot();\n  });\n\n  it('should log an error to the console when there is a problem submitting request data', async () => {\n    fetchMock.get('http://someurl.com', { data: 'abc123' });\n    interceptFetchCalls(12345);\n    global.XMLHttpRequest().open.mockImplementation(() => { throw new Error(); });\n    global.console = { error: jest.fn() };\n\n    const response = await (await global.fetch('http://someurl.com')).json();\n\n    expect(response).toEqual({ data: 'abc123' });\n    expect(global.console.error.mock.calls).toMatchSnapshot();\n    expect(global.XMLHttpRequest().send.mock.calls).toEqual([]);\n  });\n});\n"]}