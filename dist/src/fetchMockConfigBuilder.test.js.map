{"version":3,"sources":["../../src/fetchMockConfigBuilder.test.js"],"names":["buildRequest","method","url","request","describe","requests","it","repeatMap","expect","toEqual","name","overwriteRoutes","repeat","config","repeatMode","invocations"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,eAAe,SAAfA,YAAe,CAACC,MAAD,EAASC,GAAT;AAAA,SAAkB,EAAEC,SAAS,EAAEF,cAAF,EAAUC,QAAV,EAAX,EAAlB;AAAA,CAArB;;AAEAE,SAAS,wBAAT,EAAmC,YAAM;AACvC,MAAMC,WAAW,CACfL,aAAa,KAAb,EAAoB,iBAApB,CADe,EAEfA,aAAa,KAAb,EAAoB,iBAApB,CAFe,CAAjB;;AAKAM,KAAG,qDAAH,EAA0D,YAAM;AAC9D,QAAMC,YAAY,uCAAeF,QAAf,CAAlB;AAD8D,QAEtDF,OAFsD,GAE1CE,SAAS,CAAT,CAF0C,CAEtDF,OAFsD;;AAI9D;;AAEAK,WAAO,sCAAuBL,OAAvB,EAAgC,IAAhC,EAAsCI,SAAtC,CAAP,EAAyDE,OAAzD,CAAiE;AAC/DC,YAAM,SADyD;AAE/DC,uBAAiB,KAF8C;AAG/DC,cAAQ;AAHuD,KAAjE;AAKD,GAXD;;AAaAN,KAAG,+DAAH,EAAoE,YAAM;AACxE,QAAMC,YAAY,uCAAeF,QAAf,CAAlB;AADwE,QAEhEF,OAFgE,GAEpDE,SAAS,CAAT,CAFoD,CAEhEF,OAFgE;;AAGxE,QAAMU,SAAS,EAAEC,YAAY,OAAd,EAAf;;AAEAN,WAAO,sCAAuBL,OAAvB,EAAgCU,MAAhC,EAAwCN,SAAxC,CAAP,EAA2DE,OAA3D,CAAmE;AACjEC,YAAM,SAD2D;AAEjEC,uBAAiB;AAFgD,KAAnE;AAID,GATD;;AAWAL,KAAG,kHAAH,EAAuH,YAAM;AAC3H,QAAMC,YAAY,uCAAeF,QAAf,CAAlB;AAD2H,QAEnHF,OAFmH,GAEvGE,SAAS,CAAT,CAFuG,CAEnHF,OAFmH;;AAG3H,QAAMU,SAAS,EAAEC,YAAY,MAAd,EAAf;;AAEAN,WAAO,sCAAuBL,OAAvB,EAAgCU,MAAhC,EAAwCN,SAAxC,CAAP,EAA2DE,OAA3D,CAAmE;AACjEC,YAAM,SAD2D;AAEjEC,uBAAiB,KAFgD;AAGjEC,cAAQ;AAHyD,KAAnE;AAKD,GAVD;;AAYAN,KAAG,2GAAH,EAAgH,YAAM;AACpH,QAAMC,YAAY,uCAAeF,QAAf,CAAlB;AADoH,QAE5GF,OAF4G,GAEhGE,SAAS,CAAT,CAFgG,CAE5GF,OAF4G;;AAGpH,QAAMU,SAAS,EAAEC,YAAY,MAAd,EAAf;;AAEAP,cAAU,gCAAeJ,OAAf,CAAV,EAAmCY,WAAnC,GAAiD,CAAjD;;AAEAP,WAAO,sCAAuBL,OAAvB,EAAgCU,MAAhC,EAAwCN,SAAxC,CAAP,EAA2DE,OAA3D,CAAmE;AACjEC,YAAM,SAD2D;AAEjEC,uBAAiB;AAFgD,KAAnE;AAID,GAXD;AAYD,CAtDD","file":"fetchMockConfigBuilder.test.js","sourcesContent":["import buildRepeatMap from './requestRepeatMapBuilder';\nimport fetchMockConfigBuilder from './fetchMockConfigBuilder';\nimport buildRequestId from './requestIdBuilder';\n\nconst buildRequest = (method, url) => ({ request: { method, url } });\n\ndescribe('fetchMockConfigBuilder', () => {\n  const requests = [\n    buildRequest('GET', 'http://some.url'),\n    buildRequest('GET', 'http://some.url'),\n  ];\n\n  it('should build a config when no input config is given', () => {\n    const repeatMap = buildRepeatMap(requests);\n    const { request } = requests[0];\n\n    // repeatMap[buildRequestId(request)].invocations=\n\n    expect(fetchMockConfigBuilder(request, null, repeatMap)).toEqual({\n      name: 215916126,\n      overwriteRoutes: false,\n      repeat: 1,\n    });\n  });\n\n  it('should build a config when a repeatMode of \\'first\\' is given', () => {\n    const repeatMap = buildRepeatMap(requests);\n    const { request } = requests[0];\n    const config = { repeatMode: 'first' };\n\n    expect(fetchMockConfigBuilder(request, config, repeatMap)).toEqual({\n      name: 215916126,\n      overwriteRoutes: false,\n    });\n  });\n\n  it('should build a config when a repeatMode of \\'last\\' is given and invocations do not exceed the number of repeats', () => {\n    const repeatMap = buildRepeatMap(requests);\n    const { request } = requests[0];\n    const config = { repeatMode: 'last' };\n\n    expect(fetchMockConfigBuilder(request, config, repeatMap)).toEqual({\n      name: 215916126,\n      overwriteRoutes: false,\n      repeat: 1,\n    });\n  });\n\n  it('should build a config when a repeatMode of \\'last\\' is given and invocations exceed the number of repeats', () => {\n    const repeatMap = buildRepeatMap(requests);\n    const { request } = requests[0];\n    const config = { repeatMode: 'last' };\n\n    repeatMap[buildRequestId(request)].invocations = 3;\n\n    expect(fetchMockConfigBuilder(request, config, repeatMap)).toEqual({\n      name: 215916126,\n      overwriteRoutes: false,\n    });\n  });\n});\n"]}